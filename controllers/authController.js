import bcrypt from 'bcryptjs';
import crypto from 'crypto';
import jwt from 'jsonwebtoken';
import { Op } from 'sequelize';
import User from '../models/user.js';
import capitalize from '../utils/capitalize.js';

// üìå Registro de usuario
export const register = async (req, res) => {
  try {
    const {
      first_name,
      last_name,
      middle_name,
      document_number,
      email,
      password,
      confirm_password,
      role
    } = req.body;

    // üß™ Validar campos obligatorios
    if (!first_name || !last_name || !middle_name || !email || !password || !confirm_password || !document_number) {
      return res.status(400).json({ error: 'Todos los campos son obligatorios.' });
    }

    // üßº Validaci√≥n de texto (solo letras y espacios)
    const nameRegex = /^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$/;
    if (!nameRegex.test(first_name)) {
      return res.status(400).json({ error: 'El nombre solo puede contener letras y espacios.' });
    }
    if (!nameRegex.test(last_name)) {
      return res.status(400).json({ error: 'El apellido paterno solo puede contener letras y espacios.' });
    }
    if (!nameRegex.test(middle_name)) {
      return res.status(400).json({ error: 'El apellido materno solo puede contener letras y espacios.' });
    }

    // üî† Validar longitud m√≠nima
    if (first_name.length < 2 || last_name.length < 2 || middle_name.length < 2) {
      return res.status(400).json({ error: 'Nombre y apellidos deben tener al menos 2 caracteres.' });
    }

    // üî¢ Validar formato de documento (DNI 8 d√≠gitos)
    if (!/^\d{8}$/.test(document_number)) {
      return res.status(400).json({ error: 'El n√∫mero de documento debe tener 8 d√≠gitos.' });
    }

    // üìß Validar formato de email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ error: 'Correo electr√≥nico inv√°lido.' });
    }

    // üîê Validar contrase√±as
    if (password.length < 6) {
      return res.status(400).json({ error: 'La contrase√±a debe tener al menos 6 caracteres.' });
    }
    if (password !== confirm_password) {
      return res.status(400).json({ error: 'Las contrase√±as no coinciden.' });
    }

    // üß© Validar rol (si se env√≠a)
    const rolesValidos = ['estudiante', 'admin'];
    if (role && !rolesValidos.includes(role)) {
      return res.status(400).json({ error: 'Rol inv√°lido. Comun√≠quese con el administrador.' });
    }

    // ‚ùó Validar que documento o correo no est√©n repetidos
    const existingUser = await User.findOne({
      where: {
        [Op.or]: [
          { document_number },
          { email }
        ]
      }
    });
    if (existingUser) {
      return res.status(400).json({
        error: 'Ya existe un usuario con ese n√∫mero de documento o correo.'
      });
    }

    // ‚úÖ Capitalizar nombres y apellidos
    const firstNameCap = capitalize(first_name);
    const lastNameCap = capitalize(last_name);
    const middleNameCap = capitalize(middle_name);

    const hashedPassword = await bcrypt.hash(password, 10);

    await User.create({
      first_name: firstNameCap,
      last_name: lastNameCap,
      middle_name: middleNameCap,
      document_number,
      email,
      password: hashedPassword,
      role: role || 'estudiante'
    });

    return res.status(201).json({ message: 'Usuario registrado correctamente.' });

  } catch (error) {
    console.error('‚ùå Error al registrar usuario:', error);
    return res.status(500).json({ error: 'Error interno del servidor al registrar el usuario.' });
  }
};

// üîê Login
export const login = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email  || !password) {
      return res.status(400).json({ error: 'Correo y contrase√±a son requeridos.' });
    }

    const user = await User.findOne({ where: { email  } });
    if (!user) {
      return res.status(400).json({ error: 'Usuario no encontrado.' });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ error: 'Contrase√±a incorrecta.' });
    }

    const token = jwt.sign(
      { userId: user.id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    res.status(200).json({
      token,
      mustChangePassword: user.mustChangePassword // ‚úÖ ¬°Aqu√≠ est√° el campo!
    });

  } catch (error) {
    console.error('‚ùå Error al iniciar sesi√≥n:', error);
    res.status(500).json({ error: 'Error interno al iniciar sesi√≥n.' });
  }
};


// üë§ Obtener perfil del usuario logueado
export const getProfile = async (req, res) => {
  try {
    const user = await User.findByPk(req.user.userId, {
      attributes: ['id', 'first_name', 'last_name', 'middle_name', 'email', 'role']
    });

    if (!user) {
      return res.status(404).json({ error: 'Usuario no encontrado.' });
    }

    res.status(200).json({ profile: user });

  } catch (error) {
    console.error('‚ùå Error al obtener perfil:', error);
    res.status(500).json({ error: 'Error interno del servidor.' });
  }
};

// üîÑ Cambiar contrase√±a (con validaci√≥n de mustChangePassword)
export const changePassword = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { current_password, new_password, confirm_password } = req.body;

    if (!current_password || !new_password || !confirm_password) {
      return res.status(400).json({ error: 'Todos los campos son obligatorios.' });
    }

    if (new_password.length < 6) {
      return res.status(400).json({ error: 'La nueva contrase√±a debe tener al menos 6 caracteres.' });
    }

    if (new_password !== confirm_password) {
      return res.status(400).json({ error: 'Las contrase√±as nuevas no coinciden.' });
    }

    const user = await User.findByPk(userId);
    if (!user) {
      return res.status(404).json({ error: 'Usuario no encontrado.' });
    }

    const isMatch = await bcrypt.compare(current_password, user.password);
    if (!isMatch) {
      return res.status(400).json({ error: 'Contrase√±a actual incorrecta.' });
    }

    const hashed = await bcrypt.hash(new_password, 10);
    user.password = hashed;
    user.mustChangePassword = false; // ‚úÖ ya no se le pedir√° cambiarla
    await user.save();

    res.json({ message: 'Contrase√±a actualizada correctamente.' });

  } catch (error) {
    console.error('‚ùå Error al cambiar contrase√±a:', error);
    res.status(500).json({ error: 'Error interno al cambiar la contrase√±a.' });
  }
};


export const forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ error: 'El correo es obligatorio' });
    }

    const user = await User.findOne({ where: { email } });
    if (!user) {
      return res.status(404).json({ error: 'No existe un usuario con ese correo' });
    }

    // üéØ Generar token aleatorio y expiraci√≥n
    const token = crypto.randomBytes(20).toString('hex');
    const expires = Date.now() + 1000 * 60 * 15; // 15 min

    user.resetPasswordToken = token;
    user.resetPasswordExpires = new Date(expires);
    await user.save();

    // En un sistema real enviar√≠amos esto por correo
    return res.status(200).json({
      message: 'Token de recuperaci√≥n generado',
      token: token // solo para pruebas
    });
  } catch (error) {
    console.error('‚ùå Error en forgotPassword:', error);
    res.status(500).json({ error: 'Error interno' });
  }
};


export const resetPassword = async (req, res) => {
  try {
    const { token, new_password, confirm_password } = req.body;

    if (!token || !new_password || !confirm_password) {
      return res.status(400).json({ error: 'Todos los campos son obligatorios' });
    }

    if (new_password.length < 6) {
      return res.status(400).json({ error: 'Contrase√±a muy corta' });
    }

    if (new_password !== confirm_password) {
      return res.status(400).json({ error: 'Las contrase√±as no coinciden' });
    }

    const user = await User.findOne({
      where: {
        resetPasswordToken: token,
        resetPasswordExpires: {
          [Op.gt]: new Date()
        }
      }
    });

    if (!user) {
      return res.status(400).json({ error: 'Token inv√°lido o expirado' });
    }

    user.password = await bcrypt.hash(new_password, 10);
    user.resetPasswordToken = null;
    user.resetPasswordExpires = null;
    user.mustChangePassword = false;

    await user.save();

    res.json({ message: 'Contrase√±a restablecida correctamente ‚úÖ' });
  } catch (error) {
    console.error('‚ùå Error en resetPassword:', error);
    res.status(500).json({ error: 'Error interno' });
  }
};