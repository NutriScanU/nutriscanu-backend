openapi: 3.0.0
info:
  title: API Recomendación de Alimentos
  version: 1.0.0
  description: Registro, login y administración de usuarios

paths:
  /api/auth/register:
    post:
      summary: Registro de usuario
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Usuario registrado correctamente
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/login:
    post:
      summary: Iniciar sesión
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login exitoso
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/profile:
    get:
      summary: Obtener perfil del usuario autenticado
      description: Retorna los datos del usuario logueado usando su token JWT
      security:
        - bearerAuth: []
      tags:
        - Auth
      responses:
        '200':
          description: Perfil obtenido con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/admin/users:
    get:
      summary: Listar todos los usuarios (excepto el admin actual)
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuarios obtenida correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/admin/users/{id}:
    get:
      summary: Obtener un usuario por ID
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: Actualizar usuario por ID
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Usuario actualizado correctamente
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Eliminar usuario por ID
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuario eliminado correctamente
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/admin/stats:
    get:
      summary: Obtener estadísticas de usuarios
      tags:
        - Admin
      description: Devuelve cantidad total de usuarios, admins y estudiantes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Estadísticas obtenidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Unauthorized:
      description: Token inválido o no enviado
    Forbidden:
      description: Acceso denegado
    NotFound:
      description: Recurso no encontrado
    ServerError:
      description: Error interno del servidor
    BadRequest:
      description: Datos inválidos enviados

  schemas:

    UserResponse:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        email:
          type: string
        role:
          type: string

    RegisterRequest:
      type: object
      required:
        - first_name
        - last_name
        - document_number
        - email
        - password
        - confirm_password
      properties:
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        document_number:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        confirm_password:
          type: string
      example:
        first_name: Luis
        last_name: Ramos
        middle_name: Pérez
        document_number: "12345678"
        email: luis@example.com
        password: clave123
        confirm_password: clave123

    LoginRequest:
      type: object
      required:
        - document_number
        - password
      properties:
        document_number:
          type: string
        password:
          type: string
      example:
        document_number: "12345678"
        password: clave123

    UpdateUserRequest:
      type: object
      required:
        - first_name
        - last_name
        - email
      properties:
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        document_number:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        role:
          type: string
      example:
        first_name: Camila
        last_name: Luján
        middle_name: Díaz
        document_number: "98765432"
        email: camila@example.com
        password: nuevacontra456
        role: admin

    StatsResponse:
      type: object
      properties:
        total:
          type: integer
        admins:
          type: integer
        estudiantes:
          type: integer
