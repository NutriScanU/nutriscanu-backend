openapi: 3.0.0
info:
  title: API Recomendación de Alimentos
  version: 1.0.0
  description: Registro, login y administración de usuarios

paths:
  /api/auth/register:
    post:
      summary: Registro de usuario.
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Usuario registrado correctamente.
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/login:
    post:
      summary: Iniciar sesión.
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login exitoso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Token JWT de autenticación.
                  mustChangePassword:
                    type: boolean
                    description: Indica si el usuario debe cambiar su contraseña.
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/login-with-code:
    post:
      summary: Iniciar sesión usando un código de acceso único (login sin contraseña)
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, code]
              properties:
                email:
                  type: string
                  format: email
                  example: usuario@correo.com
                code:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: Sesión iniciada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Token JWT de autenticación
        '400':
          description: Código inválido o expirado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Código inválido o expirado
        '500':
          description: Error interno del servidor

  /api/auth/send-login-code:
    post:
      summary: Solicitar código de acceso único (login sin contraseña)
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
                  example: usuario@correo.com
      responses:
        '200':
          description: Código enviado exitosamente al correo registrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Código enviado al correo."
        '400':
          description: Error, correo no encontrado o campo faltante
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Correo es obligatorio."
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error inesperado."

  /api/auth/forgot-password:
    post:
      summary: Solicitar enlace para restablecer contraseña.
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: usuario@gmail.com
      responses:
        '200':
          description: Enlace de recuperación enviado si el correo está registrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Correo enviado con enlace de recuperación.
                  obfuscatedEmail:
                    type: string
                    example: "*****os@gmail.com"
        '400':
          description: El campo email es obligatorio.
        '500':
          description: Error interno del servidor.

  /api/auth/reset-password/{token}:
    post:
      summary: Cambiar contraseña usando enlace con token.
      tags: [Auth]
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Token único enviado al correo del usuario.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - new_password
                - confirm_password
              properties:
                new_password:
                  type: string
                  example: NuevaClave123
                confirm_password:
                  type: string
                  example: NuevaClave123
      responses:
        '200':
          description: Contraseña actualizada con éxito.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contraseña actualizada con éxito.
        '400':
          description: Token inválido, expirado o contraseñas no coinciden.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token inválido o expirado.
        '500':
          description: Error interno del servidor.

  /api/auth/profile:
    get:
      summary: Obtener perfil del usuario autenticado.
      description: Retorna los datos del usuario logueado usando su token JWT.
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil obtenido con éxito.
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/change-password:
    put:
      summary: Cambiar la contraseña del usuario autenticado.
      description: Permite al usuario cambiar su contraseña.
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Contraseña actualizada correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contraseña actualizada correctamente.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Cambiar la contraseña del usuario autenticado
      description: Permite al usuario cambiar su contraseña. Si mustChangePassword es true, se actualiza a false.
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Contraseña actualizada correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contraseña actualizada correctamente.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'


  /api/auth/check-email:
    get:
      summary: Verificar si un correo ya está registrado
      tags: [auth]
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
            format: email
          description: Correo electrónico a verificar
      responses:
        '200':
          description: El correo está registrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: El correo ya está registrado ✅
        '404':
          description: El correo no está registrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: El correo no está registrado ❌
        '400':
          description: Falta el parámetro `email`
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email es requerido

  /api/students/register-clinic:
    post:
      summary: Registrar datos clínicos del student
      tags: [student]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClinicalProfileInput'
      responses:
        '201':
          description: Perfil clínico y diagnóstico registrados correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClinicalProfileResponse'
        '400':
          description: Perfil ya existe
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /api/students/clinic-profile:
    get:
      summary: Obtener perfil clínico del student
      tags: [student]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil clínico encontrado
        '404':
          description: Perfil no encontrado
    put:
      summary: Actualizar perfil clínico del student
      tags: [student]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClinicProfileRequest'
      responses:
        '200':
          description: Perfil clínico actualizado correctamente
        '400':
          description: Datos inválidos
        '404':
          description: Perfil no encontrado
    delete:
      summary: Eliminar perfil clínico del student
      tags: [student]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Perfil eliminado correctamente
        '404':
          description: Perfil no encontrado
  /api/students/analyze-recommendation:
    post:
      summary: Enviar hábitos y generar recomendación personalizada
      tags: [student]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [habits]
              properties:
                habits:
                  type: object
                  properties:
                    comidas_dia:
                      type: string
                    frutas_verduras:
                      type: string
                    alergias:
                      type: string
                    bebidas_azucaradas:
                      type: string
                    actividad_fisica:
                      type: string
                    objetivo_alimentacion:
                      type: string
                    ultraprocesados:
                      type: string
                    estres:
                      type: string
                    energia_fatiga:
                      type: string
                    comidas_fuera:
                      type: string
                  example:
                    comidas_dia: "3"
                    frutas_verduras: "2-3"
                    alergias: "Intolerancia a la lactosa"
                    bebidas_azucaradas: "1-2 veces por semana"
                    actividad_fisica: "Moderado"
                    objetivo_alimentacion: "Bajar"
                    ultraprocesados: "3+ veces"
                    estres: "Alto"
                    energia_fatiga: "A veces"
                    comidas_fuera: "3-5 veces por semana"
      responses:
        '201':
          description: Recomendaciones generadas exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Recomendaciones generadas y guardadas correctamente 🧠🍽️
                  condition:
                    type: string
                    example: Anemia
                  recommendations:
                    type: array
                    items:
                      type: string
                    example: ["Hierro", "Vitamina C", "Fibra"]
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/ServerError' }
  /api/students/analysis/{id}:
    get:
      summary: Obtener un análisis específico por ID
      tags: [student]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Análisis recuperado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisLog'
        '404':
          description: Análisis no encontrado
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/students/analysis-history:
    get:
      summary: Ver historial de análisis del student
      tags: [student]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Historial recuperado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  history:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnalysisLog'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }
  /api/students/recommendations:
    get:
      summary: Obtener última recomendación generada del student
      tags: [student]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Última recomendación encontrada correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  condition:
                    type: string
                    example: Diabetes
                  recommendations:
                    type: array
                    items:
                      type: string
                    example: ["Verduras sin almidón", "Vitamina C"]
        '404':
          description: No se encontró recomendación
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No se encontraron recomendaciones para este usuario.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/students/health-status:
    get:
      summary: Obtener estado de salud del usuario
      description: Retorna la condición de salud y la probabilidad asociada.
      tags: [student]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Estado de salud y probabilidad obtenidos con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  health_condition:
                    type: string
                    example: "Diabetes"
                  probability:
                    type: number
                    example: 90.17
        '401':
          description: Token no proporcionado o inválido
        '500':
          description: Error interno del servidor
        '401':
          description: No se proporcionó un token válido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Token no proporcionado"
        '404':
          description: No se han encontrado datos clínicos para el usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No se ha registrado análisis clínico para este usuario"
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error inesperado"

  /api/students/profile:
    get:
      summary: Obtener perfil del estudiante autenticado
      tags: [student]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil del estudiante obtenido con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    type: object
                    properties:
                      first_name: { type: string }
                      last_name: { type: string }
                      middle_name: { type: string }
                      email: { type: string }
                      document_number: { type: string }
                      profile_image: { type: string }
                      about_me: { type: string }
                      social_links:
                        type: object
                        additionalProperties:
                          type: string
                  health_condition:
                    type: string
                    example: "Anemia"
                  probability:
                    type: number
                    example: 90.17
                  has_recommendation:
                    type: boolean
                    example: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/students/update-name:
    put:
      summary: Actualizar nombres del usuario autenticado
      tags: [student]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [first_name, middle_name, last_name]
              properties:
                first_name:
                  type: string
                  example: Luis
                middle_name:
                  type: string
                  example: Alberto
                last_name:
                  type: string
                  example: Rojas
      responses:
        '200':
          description: Nombre actualizado correctamente
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }

  /api/students/update-email:
    put:
      summary: Solicitar cambio de correo electrónico del estudiante
      description: Envia un correo de verificación al nuevo email ingresado. El cambio se realiza al confirmar el enlace.
      tags: [student]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [new_email]
              properties:
                new_email:
                  type: string
                  format: email
                  example: nuevo.email@example.com
      responses:
        '200':
          description: Correo de verificación enviado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Se ha enviado un correo para confirmar el nuevo email.
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }

  /api/students/confirm-email-change:
    get:
      tags:
        - Student
      summary: Confirmar cambio de correo electrónico
      description: Verifica el token recibido por correo y actualiza el correo del usuario.
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Token JWT enviado al correo
      responses:
        '200':
          description: Correo actualizado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Correo actualizado correctamente ✅
        '400':
          description: Token inválido o expirado
        '404':
          description: Usuario no encontrado
  
  
  /api/students/update-photo:
    put:
      summary: Actualizar la foto de perfil del estudiante
      tags: [student]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Imagen del perfil (JPG, PNG)
      responses:
        '200':
          description: Foto actualizada correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Foto de perfil actualizada.
                  profile_image:
                    type: string
                    example: https://nutriscanu.com/uploads/profile-images/mi-foto.jpg
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }

  /api/students/update-about:
    put:
      summary: Actualizar la descripción "Sobre mí" del estudiante
      tags: [student]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                about_me:
                  type: string
                  example: "Estudiante de ingeniería apasionado por la IA."
      responses:
        '200':
          description: Descripción actualizada correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  about_me:
                    type: string
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }

  /api/students/update-socials:
    put:
      summary: Actualizar redes sociales del estudiante
      tags: [student]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                facebook:
                  type: string
                  example: "https://facebook.com/usuario"
                instagram:
                  type: string
                  example: "https://instagram.com/usuario"
                twitter:
                  type: string
                  example: "https://twitter.com/usuario"
                linkedin:
                  type: string
                  example: "https://linkedin.com/in/usuario"
      responses:
        '200':
          description: Redes sociales actualizadas correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  social_links:
                    type: object
                    additionalProperties:
                      type: string
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }



  /api/admin/users:
    get:
      summary: Listar usuarios con paginación (excepto el admin actual)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: orderBy
          in: query
          schema:
            type: string
            enum: [first_name, last_name, email, createdAt]
            default: createdAt
        - name: orderDir
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Lista de usuarios paginada
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
                  page:
                    type: integer
                  limit:
                    type: integer
                  total:
                    type: integer
                  pages:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/admin/users/{id}:
    get:
      summary: Obtener un usuario por ID
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }
  /api/admin/users/{id}/role:
    put:
      summary: Cambiar el rol de un usuario
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [student, admin]
              example:
                role: admin
      responses:
        '200':
          description: Rol actualizado con éxito
        '400': { $ref: '#/components/responses/BadRequest' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }
  /api/admin/audit-logs:
    get:
      summary: Ver historial de acciones del administrador
      description: Devuelve las acciones realizadas por el admin autenticado (como eliminar o actualizar usuarios)
      tags: [Auditoría]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Historial obtenido con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/ServerError' }
  /api/admin/students:
    post:
      summary: Crear student con contraseña temporal generada automáticamente
      description: Solo administradores pueden crear students. Se genera una contraseña temporal que debe ser cambiada en el primer login.
      tags: [Admin]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
      responses:
        '201':
          description: student creado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: student registrado correctamente.
                  temporalPassword:
                    type: string
                    example: a1b2c3d4
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/ServerError' }
  /api/admin/users/{id}/restore:
    put:
      summary: Restaurar usuario eliminado (soft delete)
      description: Restaura un usuario previamente eliminado (requiere ser admin)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuario restaurado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuario restaurado correctamente ✅
        '400':
          description: El usuario no está eliminado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: El usuario no está eliminado.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'





components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Unauthorized:
      description: Token inválido o no enviado
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Token inválido

    Forbidden:
      description: Acceso denegado
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: No tienes permisos para acceder

    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Usuario no encontrado

    ServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Error inesperado

    BadRequest:
      description: Datos inválidos enviados
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Faltan campos obligatorios

  schemas:
    UserResponse:
      type: object
      properties:
        id: { type: integer }
        first_name: { type: string }
        last_name: { type: string }
        middle_name: { type: string }
        document_number: { type: string }
        email: { type: string }
        role: { type: string }

    RegisterRequest:
      type: object
      properties:
        first_name: { type: string }
        last_name: { type: string }
        middle_name: { type: string }
        document_number: { type: string }
        email: { type: string }
        password: { type: string }
        confirm_password: { type: string }
      required: [first_name, last_name, middle_name, document_number, email, password]
      example:
        first_name: Luis
        last_name: Ramos
        middle_name: Pérez
        document_number: "12345678"
        email: luis@example.com
        password: clave123

    LoginRequest:
      type: object
      properties:
        email: { type: string }
        password: { type: string }
      required: [email, password]
      example:
        email: "luis@example.com"
        password: clave123

    UpdateUserRequest:
      type: object
      properties:
        first_name: { type: string }
        last_name: { type: string }
        middle_name: { type: string }
        document_number: { type: string }
        email: { type: string }
        password: { type: string }
        role: { type: string }
      example:
        first_name: Camila
        last_name: Luján
        middle_name: Díaz
        document_number: "98765432"
        email: camila@example.com
        password: nuevacontra456
        role: admin
        
    ClinicalProfileInput:
      type: object
      required:
        - age
        - gender
        - bmi
        - hbA1c
        - blood_glucose_level
        - hemoglobin
        - insulin
        - triglycerides
        - hematocrit
        - red_blood_cells
        - smoking_history
      properties:
        age: { type: number }
        gender: { type: string, enum: [Male, Female] }
        bmi: { type: number }
        hbA1c: { type: number }
        blood_glucose_level: { type: number }
        hemoglobin: { type: number }
        insulin: { type: number }
        triglycerides: { type: number }
        hematocrit: { type: number }
        red_blood_cells: { type: number }
        smoking_history: { type: string, enum: [Never, Former, Current, Ever, Not Current, No Info] }
      example:
        age: 22
        gender: Male
        bmi: 26.7
        hbA1c: 5.9
        blood_glucose_level: 115
        hemoglobin: 14.2
        insulin: 16.5
        triglycerides: 170
        hematocrit: 43
        red_blood_cells: 5.2
        smoking_history: Former

    ClinicalProfileResponse:
      type: object
      properties:
        message:
          type: string
          example: Perfil clínico y diagnóstico registrados correctamente.
        condicionPrincipal:
          type: string
          example: Diabetes
        porcentajeDiagnostico:
          type: number
          format: float
          example: 81.2
        todasLasProbabilidades:
          type: object
          additionalProperties:
            type: number
          example:
            Healthy: 5.3
            Diabetes: 81.2
            Anemia: 10.5
            Ambos: 3.0


    ClinicProfileRequest:
      type: object
      required:
        - age
        - gender
        - bmi
        - hbA1c
        - blood_glucose_level
        - hemoglobin
        - insulin
        - triglycerides
        - hematocrit
        - red_blood_cells
        - condition
      properties:
        age:
          type: number
        gender:
          type: string
          enum: [Male, Female]
        bmi:
          type: number
        hbA1c:
          type: number
        blood_glucose_level:
          type: number
        hemoglobin:
          type: number
        insulin:
          type: number
        triglycerides:
          type: number
        hematocrit:
          type: number
        red_blood_cells:
          type: number
        smoking_history:
          type: string
          example: Former
        condition:
          type: string
          example: Anemia
      example:
        age: 22
        gender: Male
        bmi: 26.7
        hbA1c: 5.9
        blood_glucose_level: 115
        hemoglobin: 14.2
        insulin: 16.5
        triglycerides: 170
        hematocrit: 43
        red_blood_cells: 5.2
        smoking_history: Former
        condition: Anemia


    AnalysisLog:
      type: object
      properties:
        id:
          type: integer
        condition:
          type: string
        recommendations:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time

    ChangePasswordRequest:
      type: object
      required:
        - current_password
        - new_password
        - confirm_password
      properties:
        current_password:
          type: string
        new_password:
          type: string
        confirm_password:
          type: string
      example:
        current_password: clave123
        new_password: nuevaclave456
        confirm_password: nuevaclave456

    AuditLog:
      type: object
      properties:
        id:
          type: integer
        action:
          type: string
          enum: [delete, restore]
        user_id:
          type: integer
          description: ID del admin que ejecutó la acción
        target_id:
          type: integer
          description: ID del usuario afectado
        timestamp:
          type: string
          format: date-time
        performed_by:
          type: object
          properties:
            id: { type: integer }
            first_name: { type: string }
            last_name: { type: string }
            middle_name: { type: string }
            document_number: { type: string }
            email: { type: string }

    CreateStudentRequest:
      type: object
      required:
        - first_name
        - last_name
        - middle_name
        - document_number
        - email
      properties:
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        document_number:
          type: string
          pattern: '^\d{8}$'
        email:
          type: string
          format: email
      example:
        first_name: Carlos
        last_name: Torres
        middle_name: Mejía
        document_number: "87654321"
        email: carlos.torres@example.com

    StudentProfile:
      type: object
      properties:
        id: { type: integer }
        first_name: { type: string }
        last_name: { type: string }
        middle_name: { type: string }
        document_number: { type: string }
        email: { type: string }

    UpdateStudentProfile:
      type: object
      required:
        - first_name
        - last_name
        - middle_name
        - email
      properties:
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        email:
          type: string
          format: email
      example:
        first_name: Ana
        last_name: Rodríguez
        middle_name: Vega
        email: ana.rod@example.com
