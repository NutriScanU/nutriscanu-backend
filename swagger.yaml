openapi: 3.0.0
info:
  title: API Recomendación de Alimentos
  version: 1.0.0
  description: Registro, login y administración de usuarios

paths:
  /api/auth/register:
    post:
      summary: Registro de usuario
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Usuario registrado correctamente
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/login:
    post:
      summary: Iniciar sesión
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login exitoso
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/profile:
    get:
      summary: Obtener perfil del usuario autenticado
      description: Retorna los datos del usuario logueado usando su token JWT
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil obtenido con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/admin/users:
    get:
      summary: Listar usuarios con paginación (excepto el admin actual)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: orderBy
          in: query
          schema:
            type: string
            enum: [first_name, last_name, email, createdAt]
            default: createdAt
        - name: orderDir
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Lista de usuarios paginada
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
                  page:
                    type: integer
                  limit:
                    type: integer
                  total:
                    type: integer
                  pages:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/admin/users/{id}:
    get:
      summary: Obtener un usuario por ID
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }

    put:
      summary: Actualizar usuario por ID
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Usuario actualizado correctamente
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }

    delete:
      summary: Eliminar usuario por ID
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuario eliminado correctamente
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }

  /api/admin/users/{id}/role:
    put:
      summary: Cambiar el rol de un usuario
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [estudiante, admin]
              example:
                role: admin
      responses:
        '200':
          description: Rol actualizado con éxito
        '400': { $ref: '#/components/responses/BadRequest' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }

  /api/admin/audit-logs:
    get:
      summary: Ver historial de acciones del administrador
      description: Devuelve las acciones realizadas por el admin autenticado (como eliminar o actualizar usuarios)
      tags: [Auditoría]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Historial obtenido con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/ServerError' }

  /api/admin/users/{id}/restore:
    put:
      summary: Restaurar usuario eliminado (soft delete)
      description: Restaura un usuario previamente eliminado (requiere ser admin)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuario restaurado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuario restaurado correctamente ✅
        '400':
          description: El usuario no está eliminado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: El usuario no está eliminado.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Unauthorized:
      description: Token inválido o no enviado
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Token inválido

    Forbidden:
      description: Acceso denegado
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: No tienes permisos para acceder

    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Usuario no encontrado

    ServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Error inesperado

    BadRequest:
      description: Datos inválidos enviados
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Faltan campos obligatorios

  schemas:
    UserResponse:
      type: object
      properties:
        id: { type: integer }
        first_name: { type: string }
        last_name: { type: string }
        middle_name: { type: string }
        document_number: { type: string }
        email: { type: string }
        role: { type: string }

    RegisterRequest:
      type: object
      properties:
        first_name: { type: string }
        last_name: { type: string }
        middle_name: { type: string }
        document_number: { type: string }
        email: { type: string }
        password: { type: string }
        confirm_password: { type: string }
      required: [first_name, last_name, middle_name, document_number, email, password, confirm_password]
      example:
        first_name: Luis
        last_name: Ramos
        middle_name: Pérez
        document_number: "12345678"
        email: luis@example.com
        password: clave123
        confirm_password: clave123

    LoginRequest:
      type: object
      properties:
        document_number: { type: string }
        password: { type: string }
      required: [document_number, password]
      example:
        document_number: "12345678"
        password: clave123

    UpdateUserRequest:
      type: object
      properties:
        first_name: { type: string }
        last_name: { type: string }
        middle_name: { type: string }
        document_number: { type: string }
        email: { type: string }
        password: { type: string }
        role: { type: string }
      example:
        first_name: Camila
        last_name: Luján
        middle_name: Díaz
        document_number: "98765432"
        email: camila@example.com
        password: nuevacontra456
        role: admin

    AuditLog:
      type: object
      properties:
        id:
          type: integer
        action:
          type: string
          enum: [delete, restore]
        user_id:
          type: integer
          description: ID del admin que ejecutó la acción
        target_id:
          type: integer
          description: ID del usuario afectado
        timestamp:
          type: string
          format: date-time
        performed_by:
          type: object
          properties:
            id: { type: integer }
            first_name: { type: string }
            last_name: { type: string }
            middle_name: { type: string }
            document_number: { type: string }
            email: { type: string }