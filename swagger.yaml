openapi: 3.0.0
info:
  title: API Recomendaci√≥n de Alimentos
  version: 1.0.0
  description: Registro, login y administraci√≥n de usuarios

paths:
  /api/auth/register:
    post:
      summary: Registro de usuario
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Usuario registrado correctamente
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/login:
    post:
      summary: Iniciar sesi√≥n
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Token JWT de autenticaci√≥n
                  mustChangePassword:
                    type: boolean
                    description: Indica si el usuario debe cambiar su contrase√±a
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Iniciar sesi√≥n
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login exitoso
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /api/auth/forgot-password:
    post:
      summary: Solicitar recuperaci√≥n de contrase√±a
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Token generado
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/reset-password:
    post:
      summary: Establecer nueva contrase√±a con token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, new_password, confirm_password]
              properties:
                token:
                  type: string
                new_password:
                  type: string
                confirm_password:
                  type: string
      responses:
        '200':
          description: Contrase√±a restablecida correctamente
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/profile:
    get:
      summary: Obtener perfil del usuario autenticado
      description: Retorna los datos del usuario logueado usando su token JWT
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil obtenido con √©xito
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/change-password:
    put:
      summary: Cambiar la contrase√±a del usuario autenticado
      description: Permite al usuario cambiar su contrase√±a. Si mustChangePassword es true, se actualiza a false.
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Contrase√±a actualizada correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contrase√±a actualizada correctamente.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/students/register-clinic:
    post:
      summary: Registrar datos cl√≠nicos del estudiante
      tags: [Estudiante]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClinicalProfileInput'
      responses:
        '201':
          description: Perfil cl√≠nico registrado
        '400':
          description: Perfil ya existe
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/students/analyze-recommendation:
    post:
      summary: Enviar h√°bitos y generar recomendaci√≥n personalizada
      tags: [Estudiante]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [habits]
              properties:
                habits:
                  type: object
                  properties:
                    comidas_dia:
                      type: string
                    frutas_verduras:
                      type: string
                    alergias:
                      type: string
                    bebidas_azucaradas:
                      type: string
                    actividad_fisica:
                      type: string
                    objetivo_alimentacion:
                      type: string
                    ultraprocesados:
                      type: string
                    estres:
                      type: string
                    energia_fatiga:
                      type: string
                    comidas_fuera:
                      type: string
                  example:
                    comidas_dia: "3"
                    frutas_verduras: "2-3"
                    alergias: "Intolerancia a la lactosa"
                    bebidas_azucaradas: "1-2 veces por semana"
                    actividad_fisica: "Moderado"
                    objetivo_alimentacion: "Bajar"
                    ultraprocesados: "3+ veces"
                    estres: "Alto"
                    energia_fatiga: "A veces"
                    comidas_fuera: "3-5 veces por semana"
      responses:
        '201':
          description: Recomendaciones generadas exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Recomendaciones generadas y guardadas correctamente üß†üçΩÔ∏è
                  condition:
                    type: string
                    example: Anemia
                  recommendations:
                    type: array
                    items:
                      type: string
                    example: ["Hierro", "Vitamina C", "Fibra"]
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/ServerError' }

  /api/students/analysis-history:
    get:
      summary: Ver historial de an√°lisis del estudiante
      tags: [Estudiante]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Historial recuperado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  history:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnalysisLog'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }

  /api/admin/users:
    get:
      summary: Listar usuarios con paginaci√≥n (excepto el admin actual)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: orderBy
          in: query
          schema:
            type: string
            enum: [first_name, last_name, email, createdAt]
            default: createdAt
        - name: orderDir
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Lista de usuarios paginada
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
                  page:
                    type: integer
                  limit:
                    type: integer
                  total:
                    type: integer
                  pages:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/admin/users/{id}:
    get:
      summary: Obtener un usuario por ID
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }

    put:
      summary: Actualizar usuario por ID
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Usuario actualizado correctamente
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }

    delete:
      summary: Eliminar usuario por ID
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuario eliminado correctamente
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }

  /api/admin/users/{id}/role:
    put:
      summary: Cambiar el rol de un usuario
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [estudiante, admin]
              example:
                role: admin
      responses:
        '200':
          description: Rol actualizado con √©xito
        '400': { $ref: '#/components/responses/BadRequest' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }

  /api/admin/audit-logs:
    get:
      summary: Ver historial de acciones del administrador
      description: Devuelve las acciones realizadas por el admin autenticado (como eliminar o actualizar usuarios)
      tags: [Auditor√≠a]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Historial obtenido con √©xito
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/ServerError' }

  /api/admin/students:
    post:
      summary: Crear estudiante con contrase√±a temporal generada autom√°ticamente
      description: Solo administradores pueden crear estudiantes. Se genera una contrase√±a temporal que debe ser cambiada en el primer login.
      tags: [Admin]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
      responses:
        '201':
          description: Estudiante creado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Estudiante registrado correctamente.
                  temporalPassword:
                    type: string
                    example: a1b2c3d4
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/ServerError' }

  /api/admin/users/{id}/restore:
    put:
      summary: Restaurar usuario eliminado (soft delete)
      description: Restaura un usuario previamente eliminado (requiere ser admin)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuario restaurado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuario restaurado correctamente ‚úÖ
        '400':
          description: El usuario no est√° eliminado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: El usuario no est√° eliminado.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Unauthorized:
      description: Token inv√°lido o no enviado
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Token inv√°lido

    Forbidden:
      description: Acceso denegado
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: No tienes permisos para acceder

    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Usuario no encontrado

    ServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Error inesperado

    BadRequest:
      description: Datos inv√°lidos enviados
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Faltan campos obligatorios

  schemas:
    UserResponse:
      type: object
      properties:
        id: { type: integer }
        first_name: { type: string }
        last_name: { type: string }
        middle_name: { type: string }
        document_number: { type: string }
        email: { type: string }
        role: { type: string }

    RegisterRequest:
      type: object
      properties:
        first_name: { type: string }
        last_name: { type: string }
        middle_name: { type: string }
        document_number: { type: string }
        email: { type: string }
        password: { type: string }
        confirm_password: { type: string }
      required: [first_name, last_name, middle_name, document_number, email, password, confirm_password]
      example:
        first_name: Luis
        last_name: Ramos
        middle_name: P√©rez
        document_number: "12345678"
        email: luis@example.com
        password: clave123
        confirm_password: clave123

    LoginRequest:
      type: object
      properties:
        email: { type: string }
        password: { type: string }
      required: [email, password]
      example:
        email: "luis@example.com"
        password: clave123

    UpdateUserRequest:
      type: object
      properties:
        first_name: { type: string }
        last_name: { type: string }
        middle_name: { type: string }
        document_number: { type: string }
        email: { type: string }
        password: { type: string }
        role: { type: string }
      example:
        first_name: Camila
        last_name: Luj√°n
        middle_name: D√≠az
        document_number: "98765432"
        email: camila@example.com
        password: nuevacontra456
        role: admin
        
    ClinicalProfileInput:
      type: object
      required:
        - age
        - gender
        - bmi
        - hbA1c
        - blood_glucose_level
        - hemoglobin
        - insulin
        - triglycerides
        - hematocrit
        - red_blood_cells
        - smoking_history
      properties:
        age: { type: number }
        gender: { type: string, enum: [Male, Female] }
        bmi: { type: number }
        hbA1c: { type: number }
        blood_glucose_level: { type: number }
        hemoglobin: { type: number }
        insulin: { type: number }
        triglycerides: { type: number }
        hematocrit: { type: number }
        red_blood_cells: { type: number }
        smoking_history: { type: string, enum: [Never, Former, Current, Ever, Not Current, No Info] }
      example:
        age: 22
        gender: Male
        bmi: 26.7
        hbA1c: 5.9
        blood_glucose_level: 115
        hemoglobin: 14.2
        insulin: 16.5
        triglycerides: 170
        hematocrit: 43
        red_blood_cells: 5.2
        smoking_history: Former

          
    AnalysisLog:
      type: object
      properties:
        id:
          type: integer
        condition:
          type: string
        recommendations:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time

    ChangePasswordRequest:
      type: object
      required:
        - current_password
        - new_password
        - confirm_password
      properties:
        current_password:
          type: string
        new_password:
          type: string
        confirm_password:
          type: string
      example:
        current_password: clave123
        new_password: nuevaclave456
        confirm_password: nuevaclave456

    AuditLog:
      type: object
      properties:
        id:
          type: integer
        action:
          type: string
          enum: [delete, restore]
        user_id:
          type: integer
          description: ID del admin que ejecut√≥ la acci√≥n
        target_id:
          type: integer
          description: ID del usuario afectado
        timestamp:
          type: string
          format: date-time
        performed_by:
          type: object
          properties:
            id: { type: integer }
            first_name: { type: string }
            last_name: { type: string }
            middle_name: { type: string }
            document_number: { type: string }
            email: { type: string }

    CreateStudentRequest:
      type: object
      required:
        - first_name
        - last_name
        - middle_name
        - document_number
        - email
      properties:
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        document_number:
          type: string
          pattern: '^\d{8}$'
        email:
          type: string
          format: email
      example:
        first_name: Carlos
        last_name: Torres
        middle_name: Mej√≠a
        document_number: "87654321"
        email: carlos.torres@example.com
