openapi: 3.0.0
info:
  title: NutriScan API
  version: 1.0.0
  description: |
    🧠 API para el sistema de recomendaciones nutricionales y análisis de salud
    
    **✨ Características principales:**
    - 🔐 Autenticación JWT
    - 🤖 Análisis de datos clínicos con ML
    - 🥗 Recomendaciones nutricionales personalizadas
    - 👤 Gestión de usuarios y perfiles
    - 📊 Auditoría de acciones administrativas
  contact:
    name: 💚 NutriScan Team
    email: support@nutriscanu.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5000
    description: 🏠 Servidor de desarrollo local

tags:
  - name: 🔐 Authentication
    description: Operaciones de autenticación y autorización
  - name: 👤 Profile
    description: Operaciones sobre el perfil del usuario
  - name: 🏥 Clinical Profile
    description: Registro y gestión del perfil clínico del usuario
  - name: 🩸 Blood Analysis
    description: Consulta de resultados de análisis de sangre
  - name: 💡 Recommendations
    description: Generación y consulta de recomendaciones nutricionales
  - name: 📊 Analysis History
    description: Historial de análisis y recomendaciones
  - name: 👨‍💼 Admin
    description: Operaciones administrativas (solo administradores)
  - name: 📋 Audit
    description: Auditoría y logs del sistema

paths:
  # =============================================================================
  # 🔐 AUTHENTICATION ENDPOINTS
  # =============================================================================
  
  /api/auth/register:
    post:
      summary: 📝 Registrar nuevo usuario
      description: Registra un nuevo usuario estudiante en el sistema
      tags: [🔐 Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: ✅ Usuario registrado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: ⚠️ Email o DNI ya registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/login:
    post:
      summary: 🚪 Iniciar sesión
      description: Autentica al usuario y retorna un token JWT
      tags: [🔐 Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: ✅ Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: ❌ Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/send-login-code:
    post:
      summary: 📧 Solicitar código de acceso único
      description: Envía un código de 6 dígitos al correo para login sin contraseña
      tags: [🔐 Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      responses:
        '200':
          description: ✅ Código enviado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: ❌ Email no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/login-with-code:
    post:
      summary: 🔑 Iniciar sesión con código
      description: Autentica al usuario usando el código enviado por correo
      tags: [🔐 Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginWithCodeRequest'
      responses:
        '200':
          description: ✅ Sesión iniciada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: ❌ Código inválido o expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/forgot-password:
    post:
      summary: 🔄 Solicitar recuperación de contraseña
      description: Envía un enlace de recuperación al correo del usuario
      tags: [🔐 Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      responses:
        '200':
          description: ✅ Enlace de recuperación enviado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/reset-password/{token}:
    post:
      summary: 🔐 Restablecer contraseña
      description: Cambia la contraseña usando el token de recuperación
      tags: [🔐 Authentication]
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Token de recuperación enviado por correo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: ✅ Contraseña actualizada con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: ❌ Token inválido o contraseñas no coinciden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/profile:
    get:
      summary: 👤 Obtener perfil del usuario autenticado
      description: Retorna los datos del usuario logueado
      tags: [👤 Profile]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ✅ Perfil obtenido con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/change-password:
    put:
      summary: 🔒 Cambiar contraseña
      description: Permite al usuario cambiar su contraseña actual
      tags: [🔐 Authentication]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: ✅ Contraseña actualizada correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/check-email:
    post:
      summary: ✉️ Verificar disponibilidad de email
      description: Verifica si un correo electrónico ya está registrado
      tags: [🔐 Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      responses:
        '200':
          description: ✅ Verificación completada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckEmailResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '415':
          description: ❌ Tipo de contenido no soportado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/check-dni:
    post:
      summary: 🆔 Verificar disponibilidad de DNI
      description: Verifica si un número de documento ya está registrado
      tags: [🔐 Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckDniRequest'
      responses:
        '200':
          description: ✅ DNI ya registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckDniResponse'
        '404':
          description: 🆓 DNI disponible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckDniResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  # =============================================================================
  # 🎓 STUDENT ENDPOINTS
  # =============================================================================

  /api/students/profile:
    get:
      summary: 👨‍🎓 Obtener perfil completo del estudiante
      description: Retorna el perfil del estudiante con información de salud si está disponible
      tags: [👤 Profile]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ✅ Perfil del estudiante obtenido con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentProfileResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/students/update-name:
    put:
      summary: ✏️ Actualizar nombres del estudiante
      tags: [👤 Profile]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNameRequest'
      responses:
        '200':
          description: ✅ Nombres actualizados correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/students/update-email:
    put:
      summary: 📧 Solicitar cambio de email
      description: Envía un correo de verificación para cambiar el email
      tags: [👤 Profile]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailRequest'
      responses:
        '200':
          description: ✅ Correo de verificación enviado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: ⚠️ Email ya está en uso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/students/confirm-email-change:
    get:
      summary: ✅ Confirmar cambio de email
      description: Confirma el cambio de email usando el token enviado por correo
      tags: [👤 Profile]
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Token de confirmación enviado por correo
      responses:
        '200':
          description: ✅ Email actualizado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: ❌ Token inválido o expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/students/update-photo:
    put:
      summary: 📸 Actualizar foto de perfil
      tags: [👤 Profile]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Imagen del perfil (JPG, PNG, máximo 5MB)
      responses:
        '200':
          description: ✅ Foto actualizada correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePhotoResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '413':
          description: 📦 Archivo muy grande
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/students/update-about:
    put:
      summary: ✍️ Actualizar descripción personal
      tags: [👤 Profile]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAboutRequest'
      responses:
        '200':
          description: ✅ Descripción actualizada correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAboutResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/students/update-socials:
    put:
      summary: 🌐 Actualizar redes sociales
      tags: [👤 Profile]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSocialsRequest'
      responses:
        '200':
          description: ✅ Redes sociales actualizadas correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSocialsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  # Clinical Profile Endpoints
  /api/students/register-clinic:
    post:
      summary: 🏥 Registrar perfil clínico
      description: Registra los datos clínicos del estudiante y genera diagnóstico inicial
      tags: [🏥 Clinical Profile]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClinicalProfileInput'
      responses:
        '201':
          description: ✅ Perfil clínico registrado y diagnóstico generado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClinicalProfileResponse'
        '400':
          description: ⚠️ Perfil clínico ya existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/students/clinic-profile:
    get:
      summary: 📋 Obtener perfil clínico
      tags: [🏥 Clinical Profile]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ✅ Perfil clínico encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClinicalProfile'
        '404':
          description: ❌ Perfil clínico no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    
    put:
      summary: 🔄 Actualizar perfil clínico
      tags: [🏥 Clinical Profile]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClinicalProfileInput'
      responses:
        '200':
          description: ✅ Perfil clínico actualizado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClinicalProfileResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    
    delete:
      summary: 🗑️ Eliminar perfil clínico
      tags: [🏥 Clinical Profile]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: ✅ Perfil clínico eliminado correctamente
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/students/blood-analysis:
    get:
      summary: 🩸 Obtener datos de análisis de sangre
      description: |
        Retorna únicamente los valores de laboratorio clínico sin predicciones de ML.
        Útil para prellenar formularios y mostrar datos actuales.
      tags: [🩸 Blood Analysis]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ✅ Datos de análisis obtenidos correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BloodAnalysisResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: ❌ Perfil clínico no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/students/health-status:
    get:
      summary: ❤️ Obtener estado de salud
      description: Retorna la condición de salud actual y probabilidad del diagnóstico
      tags: [🏥 Clinical Profile]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ✅ Estado de salud obtenido con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatusResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: ❌ No se han encontrado datos clínicos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  # Recommendations Endpoints
  /api/students/analyze-recommendation:
    post:
      summary: 🧠 Generar recomendaciones personalizadas
      description: Analiza los hábitos del usuario y genera recomendaciones nutricionales basadas en su perfil clínico
      tags: [💡 Recommendations]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HabitsAnalysisRequest'
      responses:
        '201':
          description: ✅ Recomendaciones generadas exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: ❌ Perfil clínico no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/students/recommendations:
    get:
      summary: 💡 Obtener última recomendación
      description: Retorna la última recomendación nutricional generada para el usuario
      tags: [💡 Recommendations]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ✅ Última recomendación encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LastRecommendationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: ❌ No se encontraron recomendaciones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/students/analysis-history:
    get:
      summary: 📊 Obtener historial de análisis
      description: Retorna el historial completo de análisis y recomendaciones del estudiante
      tags: [📊 Analysis History]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ✅ Historial recuperado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisHistoryResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/students/analysis/{id}:
    get:
      summary: 🔍 Obtener análisis específico
      description: Retorna un análisis específico por su ID
      tags: [📊 Analysis History]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del análisis
      responses:
        '200':
          description: ✅ Análisis recuperado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisLog'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  # =============================================================================
  # 👨‍💼 ADMIN ENDPOINTS
  # =============================================================================

  /api/admin/users:
    get:
      summary: 👥 Listar usuarios con paginación
      description: Obtiene una lista paginada de usuarios (excepto el admin actual)
      tags: [👨‍💼 Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Número de página
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Elementos por página
        - name: orderBy
          in: query
          schema:
            type: string
            enum: [first_name, last_name, email, createdAt]
            default: createdAt
          description: Campo para ordenar
        - name: orderDir
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Dirección del ordenamiento
      responses:
        '200':
          description: ✅ Lista de usuarios obtenida con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/admin/users/{id}:
    get:
      summary: 🔍 Obtener usuario por ID
      tags: [👨‍💼 Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del usuario
      responses:
        '200':
          description: ✅ Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/admin/users/{id}/role:
    put:
      summary: 🔄 Cambiar rol de usuario
      description: Actualiza el rol de un usuario específico
      tags: [👨‍💼 Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
      responses:
        '200':
          description: ✅ Rol actualizado con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/admin/users/{id}/restore:
    put:
      summary: ♻️ Restaurar usuario eliminado
      description: Restaura un usuario previamente eliminado (soft delete)
      tags: [👨‍💼 Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del usuario a restaurar
      responses:
        '200':
          description: ✅ Usuario restaurado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: ⚠️ El usuario no está eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/admin/students:
    post:
      summary: ➕ Crear estudiante con contraseña temporal
      description: |
        Crea un nuevo estudiante con una contraseña temporal generada automáticamente.
        El estudiante debe cambiar la contraseña en su primer login.
      tags: [👨‍💼 Admin]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
      responses:
        '201':
          description: ✅ Estudiante creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateStudentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: ⚠️ Email o DNI ya registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  # =============================================================================
  # 📋 AUDIT ENDPOINTS
  # =============================================================================

  /api/admin/audit-logs:
    get:
      summary: 📝 Obtener logs de auditoría
      description: Retorna el historial de acciones realizadas por el administrador autenticado
      tags: [📋 Audit]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: ✅ Logs de auditoría obtenidos con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

# =============================================================================
# 🔧 COMPONENTS
# =============================================================================

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 🔑 Token JWT obtenido del endpoint de login

  responses:
    Unauthorized:
      description: ❌ Token inválido, expirado o no proporcionado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Token inválido o expirado"

    Forbidden:
      description: 🚫 Acceso denegado - Permisos insuficientes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "No tienes permisos para acceder a este recurso"

    NotFound:
      description: ❌ Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Recurso no encontrado"

    BadRequest:
      description: ⚠️ Datos inválidos o campos requeridos faltantes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Faltan campos obligatorios"

    ServerError:
      description: 💥 Error interno del servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Error interno del servidor"

  schemas:
    # =============================================================================
    # 🔧 COMMON SCHEMAS
    # =============================================================================
    
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: 📝 Mensaje de error descriptivo
      required: [error]
      example:
        error: "Mensaje de error descriptivo"

    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          description: ✅ Mensaje de éxito
      required: [message]
      example:
        message: "Operación completada con éxito"

    TokenResponse:
      type: object
      properties:
        token:
          type: string
          description: 🔑 Token JWT de autenticación
      required: [token]
      example:
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    # =============================================================================
    # 👤 USER SCHEMAS
    # =============================================================================

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          description: 🆔 ID único del usuario
        first_name:
          type: string
          description: 👤 Primer nombre
        last_name:
          type: string
          description: 👤 Apellido paterno
        middle_name:
          type: string
          description: 👤 Apellido materno
        document_number:
          type: string
          description: 🆔 Número de documento de identidad
        email:
          type: string
          format: email
          description: 📧 Correo electrónico
        role:
          type: string
          enum: [student, admin]
          description: 👥 Rol del usuario
        profile_image:
          type: string
          nullable: true
          description: 📸 URL de la imagen de perfil
        about_me:
          type: string
          nullable: true
          description: ✍️ Descripción personal
        social_links:
          type: object
          nullable: true
          additionalProperties:
            type: string
          description: 🌐 Enlaces a redes sociales
        createdAt:
          type: string
          format: date-time
          description: 📅 Fecha de creación
      example:
        id: 1
        first_name: "Juan"
        last_name: "Pérez"
        middle_name: "García"
        document_number: "12345678"
        email: "juan.perez@example.com"
        role: "student"
        profile_image: "http://localhost:5000/uploads/profile-images/user-1.jpg"
        about_me: "Estudiante de nutrición interesado en vida saludable"
        social_links:
          facebook: "https://facebook.com/juan.perez"
          instagram: "https://instagram.com/juan.perez"
        createdAt: "2024-01-15T10:30:00Z"

    # =============================================================================
    # 🔐 AUTHENTICATION SCHEMAS
    # =============================================================================

    RegisterRequest:
      type: object
      required: [first_name, last_name, middle_name, document_number, email, password, confirm_password]
      properties:
        first_name:
          type: string
          minLength: 2
          maxLength: 50
          pattern: '^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$'
          description: 👤 Primer nombre
        last_name:
          type: string
          minLength: 2
          maxLength: 50
          pattern: '^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$'
          description: 👤 Apellido paterno
        middle_name:
          type: string
          minLength: 2
          maxLength: 50
          pattern: '^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$'
          description: 👤 Apellido materno
        document_number:
          type: string
          pattern: '^\d{8}$'
          description: 🆔 DNI de 8 dígitos
        email:
          type: string
          format: email
          description: 📧 Correo electrónico válido
        password:
          type: string
          minLength: 6
          description: 🔒 Contraseña (mínimo 6 caracteres)
        confirm_password:
          type: string
          description: 🔒 Confirmación de contraseña (debe coincidir)
      example:
        first_name: "Luis"
        last_name: "Ramos"
        middle_name: "Pérez"
        document_number: "12345678"
        email: "luis.ramos@example.com"
        password: "micontraseña123"
        confirm_password: "micontraseña123"

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          description: 📧 Correo electrónico registrado
        password:
          type: string
          description: 🔒 Contraseña del usuario
      example:
        email: "luis.ramos@example.com"
        password: "micontraseña123"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: 🔑 Token JWT de autenticación
        mustChangePassword:
          type: boolean
          description: 🔄 Indica si el usuario debe cambiar su contraseña
      required: [token, mustChangePassword]
      example:
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        mustChangePassword: false

    LoginWithCodeRequest:
      type: object
      required: [email, code]
      properties:
        email:
          type: string
          format: email
          description: 📧 Correo electrónico registrado
        code:
          type: string
          pattern: '^\d{6}$'
          description: 🔢 Código de 6 dígitos enviado por correo
      example:
        email: "usuario@example.com"
        code: "123456"

    EmailRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
          description: 📧 Dirección de correo electrónico
      example:
        email: "usuario@example.com"

    ForgotPasswordResponse:
      type: object
      properties:
        message:
          type: string
        obfuscatedEmail:
          type: string
          description: 📧 Email ofuscado para confirmar el envío
      example:
        message: "Correo enviado con enlace de recuperación"
        obfuscatedEmail: "u****o@example.com"

    ResetPasswordRequest:
      type: object
      required: [new_password, confirm_password]
      properties:
        new_password:
          type: string
          minLength: 6
          description: 🔒 Nueva contraseña
        confirm_password:
          type: string
          description: 🔒 Confirmación de la nueva contraseña
      example:
        new_password: "nuevacontraseña123"
        confirm_password: "nuevacontraseña123"

    ChangePasswordRequest:
      type: object
      required: [current_password, new_password, confirm_password]
      properties:
        current_password:
          type: string
          description: 🔒 Contraseña actual
        new_password:
          type: string
          minLength: 6
          description: 🔒 Nueva contraseña
        confirm_password:
          type: string
          description: 🔒 Confirmación de la nueva contraseña
      example:
        current_password: "contraseñaactual"
        new_password: "nuevacontraseña123"
        confirm_password: "nuevacontraseña123"

    CheckEmailResponse:
      type: object
      properties:
        exists:
          type: boolean
          description: ✅ Indica si el correo ya está registrado
        message:
          type: string
          description: 📝 Mensaje descriptivo del resultado
      required: [exists, message]
      example:
        exists: false
        message: "El correo electrónico está disponible"

    CheckDniRequest:
      type: object
      required: [document_number]
      properties:
        document_number:
          type: string
          pattern: '^\d{8}$'
          description: 🆔 Número de DNI a verificar
      example:
        document_number: "12345678"

    CheckDniResponse:
      type: object
      properties:
        exists:
          type: boolean
          description: ✅ Indica si el DNI ya está registrado
        message:
          type: string
          description: 📝 Mensaje descriptivo del resultado
      required: [exists, message]
      example:
        exists: false
        message: "El DNI está disponible"

    # =============================================================================
    # 🎓 STUDENT SCHEMAS
    # =============================================================================

    StudentProfileResponse:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/UserResponse'
        health_condition:
          type: string
          nullable: true
          description: 🏥 Condición de salud diagnosticada
        probability:
          type: number
          format: float
          nullable: true
          description: 📊 Probabilidad del diagnóstico (0-100)
        has_recommendation:
          type: boolean
          description: 💡 Indica si el usuario tiene recomendaciones disponibles
      example:
        profile:
          id: 1
          first_name: "Ana"
          last_name: "García"
          middle_name: "López"
          email: "ana.garcia@example.com"
          role: "student"
        health_condition: "Anemia"
        probability: 85.7
        has_recommendation: true

    UpdateNameRequest:
      type: object
      required: [first_name, middle_name, last_name]
      properties:
        first_name:
          type: string
          minLength: 2
          maxLength: 50
        middle_name:
          type: string
          minLength: 2
          maxLength: 50
        last_name:
          type: string
          minLength: 2
          maxLength: 50
      example:
        first_name: "Luis"
        middle_name: "Alberto"
        last_name: "Rojas"

    UpdateEmailRequest:
      type: object
      required: [new_email]
      properties:
        new_email:
          type: string
          format: email
          description: 📧 Nuevo correo electrónico
      example:
        new_email: "nuevo.email@example.com"

    UpdatePhotoResponse:
      type: object
      properties:
        message:
          type: string
        profile_image:
          type: string
          description: 📸 URL de la nueva imagen de perfil
      example:
        message: "Foto de perfil actualizada correctamente"
        profile_image: "http://localhost:5000/uploads/profile-images/user-123.jpg"

    UpdateAboutRequest:
      type: object
      properties:
        about_me:
          type: string
          maxLength: 500
          description: ✍️ Descripción personal (máximo 500 caracteres)
      example:
        about_me: "Estudiante de ingeniería apasionado por la IA y la nutrición"

    UpdateAboutResponse:
      type: object
      properties:
        message:
          type: string
        about_me:
          type: string
      example:
        message: "Descripción actualizada correctamente"
        about_me: "Estudiante de ingeniería apasionado por la IA y la nutrición"

    UpdateSocialsRequest:
      type: object
      properties:
        facebook:
          type: string
          format: uri
          nullable: true
        instagram:
          type: string
          format: uri
          nullable: true
        twitter:
          type: string
          format: uri
          nullable: true
        linkedin:
          type: string
          format: uri
          nullable: true
      example:
        facebook: "https://facebook.com/usuario"
        instagram: "https://instagram.com/usuario"
        linkedin: "https://linkedin.com/in/usuario"

    UpdateSocialsResponse:
      type: object
      properties:
        message:
          type: string
        social_links:
          type: object
          additionalProperties:
            type: string
      example:
        message: "Redes sociales actualizadas correctamente"
        social_links:
          facebook: "https://facebook.com/usuario"
          instagram: "https://instagram.com/usuario"

    # =============================================================================
    # 🏥 CLINICAL SCHEMAS
    # =============================================================================

    ClinicalProfileInput:
      type: object
      required: [age, gender, bmi, hbA1c, blood_glucose_level, hemoglobin, insulin, triglycerides, hematocrit, red_blood_cells, smoking_history]
      properties:
        age:
          type: integer
          minimum: 16
          maximum: 35
          description: 📅 Edad del paciente en años
        gender:
          type: string
          enum: [Male, Female]
          description: 👤 Género del paciente
        bmi:
          type: number
          format: float
          minimum: 0
          description: ⚖️ Índice de Masa Corporal (kg/m²)
        hbA1c:
          type: number
          format: float
          minimum: 0
          description: 🩸 Hemoglobina glicosilada (%)
        blood_glucose_level:
          type: number
          format: float
          minimum: 0
          description: 🍬 Nivel de glucosa en sangre (mg/dL)
        hemoglobin:
          type: number
          format: float
          minimum: 0
          description: 🩸 Nivel de hemoglobina (g/dL)
        insulin:
          type: number
          format: float
          minimum: 0
          description: 💉 Nivel de insulina (μU/mL)
        triglycerides:
          type: number
          format: float
          minimum: 0
          description: 🧬 Nivel de triglicéridos (mg/dL)
        hematocrit:
          type: number
          format: float
          minimum: 0
          description: 🩸 Porcentaje de hematocrito (%)
        red_blood_cells:
          type: number
          format: float
          minimum: 0
          description: 🔴 Conteo de glóbulos rojos (millones/μL)
        smoking_history:
          type: string
          enum: [Never, Former, Current, Ever, Not Current, No Info]
          description: 🚬 Historial de tabaquismo
      example:
        age: 25
        gender: "Male"
        bmi: 23.5
        hbA1c: 5.8
        blood_glucose_level: 95
        hemoglobin: 14.2
        insulin: 85
        triglycerides: 150
        hematocrit: 42
        red_blood_cells: 4.5
        smoking_history: "Never"

    ClinicalProfile:
      allOf:
        - $ref: '#/components/schemas/ClinicalProfileInput'
        - type: object
          properties:
            id:
              type: integer
              description: 🆔 ID del perfil clínico
            user_id:
              type: integer
              description: 🆔 ID del usuario
            condition:
              type: string
              description: 🏥 Condición diagnosticada
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    ClinicalProfileResponse:
      type: object
      properties:
        message:
          type: string
          description: ✅ Mensaje de confirmación
        condicionPrincipal:
          type: string
          description: 🏥 Condición de salud principal diagnosticada
        porcentajeDiagnostico:
          type: number
          format: float
          description: 📊 Porcentaje de probabilidad del diagnóstico principal
        todasLasProbabilidades:
          type: object
          additionalProperties:
            type: number
          description: 📈 Probabilidades de todas las condiciones analizadas
      example:
        message: "Perfil clínico y diagnóstico registrados correctamente"
        condicionPrincipal: "Diabetes"
        porcentajeDiagnostico: 81.2
        todasLasProbabilidades:
          Healthy: 5.3
          Diabetes: 81.2
          Anemia: 10.5
          Ambos: 3.0

    BloodAnalysisResponse:
      type: object
      properties:
        success:
          type: boolean
          description: ✅ Indica si la operación fue exitosa
        bloodAnalysis:
          $ref: '#/components/schemas/ClinicalProfileInput'
      example:
        success: true
        bloodAnalysis:
          age: 25
          gender: "Male"
          bmi: 23.5
          hbA1c: 5.8
          blood_glucose_level: 95
          hemoglobin: 14.2
          insulin: 85
          triglycerides: 150
          hematocrit: 42
          red_blood_cells: 4.5
          smoking_history: "Never"

    HealthStatusResponse:
      type: object
      properties:
        health_condition:
          type: string
          description: 🏥 Condición de salud actual
        probability:
          type: number
          format: float
          description: 📊 Probabilidad del diagnóstico (0-100)
      example:
        health_condition: "Diabetes"
        probability: 90.17

    # =============================================================================
    # 💡 RECOMMENDATIONS SCHEMAS
    # =============================================================================

    HabitsAnalysisRequest:
      type: object
      required: [habits]
      properties:
        habits:
          type: object
          required: [comidas_dia, frutas_verduras, alergias, bebidas_azucaradas, actividad_fisica, objetivo_alimentacion, ultraprocesados, estres, energia_fatiga, comidas_fuera]
          properties:
            comidas_dia:
              type: string
              description: 🍽️ Número de comidas por día
            frutas_verduras:
              type: string
              description: 🥬 Porciones de frutas y verduras diarias
            alergias:
              type: string
              description: ⚠️ Alergias o intolerancias alimentarias
            bebidas_azucaradas:
              type: string
              description: 🥤 Frecuencia de consumo de bebidas azucaradas
            actividad_fisica:
              type: string
              description: 🏃‍♂️ Nivel de actividad física
            objetivo_alimentacion:
              type: string
              description: 🎯 Objetivo nutricional del usuario
            ultraprocesados:
              type: string
              description: 🍟 Frecuencia de consumo de alimentos ultraprocesados
            estres:
              type: string
              description: 😰 Nivel de estrés percibido
            energia_fatiga:
              type: string
              description: ⚡ Niveles de energía y fatiga
            comidas_fuera:
              type: string
              description: 🍽️ Frecuencia de comidas fuera de casa
          example:
            comidas_dia: "3"
            frutas_verduras: "2-3"
            alergias: "Intolerancia a la lactosa"
            bebidas_azucaradas: "1-2 veces por semana"
            actividad_fisica: "Moderado"
            objetivo_alimentacion: "Mantener peso"
            ultraprocesados: "3+ veces"
            estres: "Alto"
            energia_fatiga: "A veces"
            comidas_fuera: "3-5 veces por semana"

    RecommendationResponse:
      type: object
      properties:
        message:
          type: string
          description: ✅ Mensaje de confirmación
        condition:
          type: string
          description: 🏥 Condición de salud del usuario
        recommendations:
          type: array
          items:
            type: string
          description: 💡 Lista de recomendaciones nutricionales
      example:
        message: "Recomendaciones generadas y guardadas correctamente 🧠🍽️"
        condition: "Anemia"
        recommendations: ["Hierro", "Vitamina C", "Fibra"]

    LastRecommendationResponse:
      type: object
      properties:
        condition:
          type: string
          description: 🏥 Condición de salud
        recommendations:
          type: array
          items:
            type: string
          description: 💡 Lista de recomendaciones
      example:
        condition: "Diabetes"
        recommendations: ["Verduras sin almidón", "Vitamina C"]

    AnalysisLog:
      type: object
      properties:
        id:
          type: integer
          description: 🆔 ID del análisis
        condition:
          type: string
          description: 🏥 Condición diagnosticada
        recommendations:
          type: array
          items:
            type: string
          description: 💡 Recomendaciones generadas
        createdAt:
          type: string
          format: date-time
          description: 📅 Fecha de creación del análisis
      example:
        id: 1
        condition: "Diabetes"
        recommendations: ["Verduras sin almidón", "Proteínas magras"]
        createdAt: "2024-01-15T10:30:00Z"

    AnalysisHistoryResponse:
      type: object
      properties:
        history:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisLog'
          description: 📊 Lista de análisis históricos
      example:
        history:
          - id: 1
            condition: "Diabetes"
            recommendations: ["Verduras sin almidón", "Proteínas magras"]
            createdAt: "2024-01-15T10:30:00Z"
          - id: 2
            condition: "Anemia"
            recommendations: ["Hierro", "Vitamina C"]
            createdAt: "2024-01-10T08:15:00Z"

    # =============================================================================
    # 👨‍💼 ADMIN SCHEMAS
    # =============================================================================

    UsersListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        page:
          type: integer
          description: 📄 Página actual
        limit:
          type: integer
          description: 📊 Elementos por página
        total:
          type: integer
          description: 🔢 Total de usuarios
        pages:
          type: integer
          description: 📄 Total de páginas
      example:
        users: []
        page: 1
        limit: 10
        total: 25
        pages: 3

    UpdateRoleRequest:
      type: object
      required: [role]
      properties:
        role:
          type: string
          enum: [student, admin]
          description: 👥 Nuevo rol para el usuario
      example:
        role: "admin"

    CreateStudentRequest:
      type: object
      required: [first_name, last_name, middle_name, document_number, email]
      properties:
        first_name:
          type: string
          minLength: 2
          maxLength: 50
          description: 👤 Primer nombre del estudiante
        last_name:
          type: string
          minLength: 2
          maxLength: 50
          description: 👤 Apellido paterno
        middle_name:
          type: string
          minLength: 2
          maxLength: 50
          description: 👤 Apellido materno
        document_number:
          type: string
          pattern: '^\d{8}$'
          description: 🆔 DNI de 8 dígitos
        email:
          type: string
          format: email
          description: 📧 Correo electrónico del estudiante
      example:
        first_name: "Carlos"
        last_name: "Torres"
        middle_name: "Mejía"
        document_number: "87654321"
        email: "carlos.torres@example.com"

    CreateStudentResponse:
      type: object
      properties:
        message:
          type: string
          description: ✅ Mensaje de confirmación
        temporalPassword:
          type: string
          description: 🔑 Contraseña temporal generada
        user:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            email:
              type: string
      example:
        message: "Estudiante registrado correctamente"
        temporalPassword: "a1b2c3d4"
        user:
          id: 5
          name: "Carlos Torres Mejía"
          email: "carlos.torres@example.com"

    # =============================================================================
    # 📋 AUDIT SCHEMAS
    # =============================================================================

    AuditLog:
      type: object
      properties:
        id:
          type: integer
          description: 🆔 ID del log de auditoría
        action:
          type: string
          enum: [delete, restore, role_change, create]
          description: 🎬 Acción realizada
        user_id:
          type: integer
          description: 👨‍💼 ID del administrador que ejecutó la acción
        target_id:
          type: integer
          description: 🎯 ID del usuario afectado
        timestamp:
          type: string
          format: date-time
          description: 📅 Fecha y hora de la acción
        performed_by:
          type: object
          properties:
            id:
              type: integer
            first_name:
              type: string
            last_name:
              type: string
            middle_name:
              type: string
            document_number:
              type: string
            email:
              type: string
          description: 👨‍💼 Información del administrador que realizó la acción
      example:
        id: 1
        action: "delete"
        user_id: 1
        target_id: 5
        timestamp: "2024-01-15T14:30:00Z"
        performed_by:
          id: 1
          first_name: "Admin"
          last_name: "Principal"
          middle_name: "Sistema"
          document_number: "00000000"
          email: "admin@nutriscanu.com"

    AuditLogsResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/AuditLog'
        page:
          type: integer
          description: 📄 Página actual
        limit:
          type: integer
          description: 📊 Elementos por página
        total:
          type: integer
          description: 🔢 Total de logs
        pages:
          type: integer
          description: 📄 Total de páginas
      example:
        logs: []
        page: 1
        limit: 20
        total: 50
        pages: 3
